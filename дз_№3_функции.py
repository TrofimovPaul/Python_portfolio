# -*- coding: utf-8 -*-
"""ДЗ №3. Функции

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1itMBQfCAuJr4s05M10OrglJ3YuBx68XV
"""

"""
**Домашнее задание к лекции.
Задание 1**
Напишите функцию, которая классифицирует фильмы из материалов занятия по следующим правилам:
- оценка 2 и меньше - низкий рейтинг
- оценка 4 и меньше - средний рейтинг
- оценка 4.5 и 5 - высокий рейтинг

Результат классификации запишите в столбец class"""
#ставит класс каждой оценки
import pandas as pd
df = pd.read_csv('ratings.csv')
df.tail()
def classification(x):
  if x <= 2:
    return 'Низкий рейтинг'
  elif 2 < x <= 4:
    return 'Средний рейтинг'
  elif x in [4.5, 5]:
    return 'Высокий рейтинг'
df['class'] = df['rating'].apply(classification)
df.head()

from numpy.core.fromnumeric import mean
"""
**Домашнее задание к лекции.
Задание 1**
Напишите функцию, которая классифицирует фильмы из материалов занятия по следующим правилам:
- оценка 2 и меньше - низкий рейтинг
- оценка 4 и меньше - средний рейтинг
- оценка 4.5 и 5 - высокий рейтинг

Результат классификации запишите в столбец class"""

#Считает средний рейтинг фильмов и выводит их количество в зависимости от класса 
import pandas as pd
df = pd.read_csv('ratings.csv')
df.tail()
def classification2(x):
  if x <= 2:
    return 'Низкий рейтинг'
  elif 2 < x <= 4:
    return 'Средний рейтинг'
  elif 4 < x <= 5:
    return 'Высокий рейтинг'
df_new = df.groupby(['movieId']).apply(mean)
df_new['class'] = df_new['rating'].apply(classification2)
result = df_new[['movieId', 'rating', 'class']].sort_values(by = 'rating', ascending = False)
result['class'].value_counts()

"""
Задание 2
Используем файл keywords.csv.

Необходимо написать гео-классификатор, который каждой строке сможет выставить географическую принадлежность определенному региону. 
Т. е. если поисковый запрос содержит название города региона, то в столбце ‘region’ пишется название этого региона. 
Если поисковый запрос не содержит названия города, то ставим ‘undefined’.

Правила распределения по регионам Центр, Северо-Запад и Дальний Восток:

Результат классификации запишите в отдельный столбец region."""

geo_data = {
'Центр': ['москва', 'тула', 'ярославль'],
'Северо-Запад': ['петербург', 'псков', 'мурманск'],
'Дальний Восток': ['владивосток', 'сахалин', 'хабаровск']
}

df2 = pd.read_csv('keywords.csv')
def geo(request):
  request = request.strip().split()
  for i in request:
    for k, v in geo_data.items():
      if i in v:
        return k
df2['region'] = df2['keyword'].apply(geo).fillna('undefined')
df2.head()
df2['region'].value_counts()
#df2.query(f'region == "Центр"')

"""Задание 3 (бонусное)

Есть мнение, что “раньше снимали настоящее кино, не то что сейчас”. 
Ваша задача проверить это утверждение, используя файлы с рейтингами фильмов из прошлого домашнего занятия 
(файл movies.csv и ratings.csv из базы grouplens.org.../movielens). 
Т. е. проверить верно ли, что с ростом года выпуска фильма его средний рейтинг становится ниже.

При этом мы не будем затрагивать субьективные факторы выставления этих рейтингов, а пройдемся по следующему алгоритму:

    В переменную years запишите список из всех годов с 1950 по 2010.

    Напишите функцию production_year, которая каждой строке из названия фильма выставляет год выпуска. 
    Не все названия фильмов содержат год выпуска в одинаковом формате, поэтому используйте следующий алгоритм:
        для каждой строки пройдите по всем годам списка years
        если номер года присутствует в названии фильма, то функция возвращает этот год как год выпуска
        если ни один из номеров года списка years не встретился в названии фильма, то возвращается 1900 год

    Запишите год выпуска фильма по алгоритму пункта 2 в новый столбец ‘year’

    Посчитайте средний рейтинг всех фильмов для каждого значения столбца ‘year’ и отсортируйте результат по убыванию рейтинга
"""

df3 = pd.read_csv('movies.csv')
years = range(1950,2011)
df3.head()
def production_year(t):
  for i in years:
    if str(i) in t:
      return i
      break
df3['year']=df3['title'].apply(production_year)
df3.head()
df3_group = df3.merge(result.reset_index(drop = True), on = 'movieId', how = 'left')
df3_group.head()
res = df3_group.groupby(['year']).agg({'rating':'mean', 'title':'count'}).sort_values(by = 'rating', ascending = 0).reset_index()
res.head()

df3 = pd.read_csv('movies.csv')
years = range(1950,2011)
df3.head()
def production_year(t):
  for i in years:
    if str(i) in t:
      return i
      break
df3['year']=df3['title'].apply(production_year)
df3.head()
df3_group = df3.merge(result.reset_index(drop = True), on = 'movieId', how = 'left')
df3_group.head()
res = df3_group.groupby(['year']).agg({'rating':'mean', 'title':'count'}).sort_values(by = 'year', ascending = 0).reset_index()
res.head()
import numpy as np
import matplotlib.pyplot as plt
y = list(res.rating)
x = list(res.year)
plt.plot(x,y)
plt.show()
#всё печально... :|