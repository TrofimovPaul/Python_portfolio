# -*- coding: utf-8 -*-
"""ДЗ №4. Статистика

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b2PXJIe5pmjZzjwYUiOtKqyKFBX4O1m5
"""

"""Домашнее задание к лекции «Корреляция и корреляционный анализ»

Возьмите датасет Mortality and Water Hardness**


В этом датасете содержатся данные по средней годовой смертности на
100000 населения и концентрации кальция в питьевой воде для 61
большого города в Англии и Уэльсе. Города дополнительно поделены на
северные и южные.

Задание 1.
Ответить на вопрос: есть ли связь между жёсткостью воды и средней годовой смертностью?

    Построить точечный график
    Рассчитать коэффициенты корреляции Пирсона и Спирмена
    Построить модель линейной регрессии
    Рассчитать коэффициент детерминации
    Вывести график остатков

Задание 2.
Ответить на вопрос: сохраняется ли аналогичная зависимость для северных и южных городов по отдельности?

    Разделить данные на 2 группы
    Повторить аналогичные шаги из пункта 1 для каждой группы по отдельности

"""

import pandas as pd
import matplotlib.pyplot as plt

df1 = pd.read_csv('water.csv')

#Построить точечный график
df1.plot(kind = 'scatter', x = 'hardness', y = 'mortality', title = 'Correlation between mortality and water hardness')
plt.show()

#Рассчитать коэффициенты корреляции Пирсона и Спирмена
print('КК Спирмена\n', df1[['mortality', 'hardness']].corr(method = 'spearman'), '\n')
print('КК Пирсона\n', df1[['mortality', 'hardness']].corr(method = 'pearson'))

#Построить модель линейной регрессии
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
X = df1[['hardness']]
y = df1['mortality']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=3)

X_train.shape

y_train.shape

model = LinearRegression()
model.fit(X_train, y_train)  # метод обучается на данных и подбирает оптимальные коэффициенты

model.coef_

model.intercept_

y_pred = model.predict(X_test)
y_pred

y_test

#Рассчитать коэффициент детерминации
model.score(X_test, y_test) # метод возвращает значение коэффициента детерминации

#Вывести график остатков
plt.scatter(X_test, y_test)
plt.plot(X_test, y_pred, c='r')

"""ВЫВОД: 
Согласно полученным данным, наблюдается заметная, близкая к сильной, обратная зависимость между жесткостью воды и среднегодовой смертностью. 
"""

#############################################################################################

#Задание 2.
#Ответить на вопрос: сохраняется ли аналогичная зависимость для северных и южных городов по отдельности?
#Разделить данные на 2 группы
df2 = df1.loc[df1.location == 'South']
df3 = df1.loc[df1.location == 'North']
#print(df2 ,'\n'*5,  df3 )

#Построить точечный график
df2.plot(kind = 'scatter', x = 'hardness', y = 'mortality', title = 'Correlation between mortality and water hardness 2')
plt.show()

#Рассчитать коэффициенты корреляции Пирсона и Спирмена
print('КК Спирмена\n', df2[['mortality', 'hardness']].corr(method = 'spearman'), '\n')
print('КК Пирсона\n', df2[['mortality', 'hardness']].corr(method = 'pearson'))

#Построить модель линейной регрессии
X2 = df2[['hardness']]
y2 = df2['mortality']

X_train2, X_test2, y_train2, y_test2 = train_test_split(X2, y2, test_size=0.30, random_state=3)

X_train2.shape

y_train2.shape

model2 = LinearRegression()
model2.fit(X_train2, y_train2)  # метод обучается на данных и подбирает оптимальные коэффициенты

model2.coef_

model2.intercept_

y_pred2 = model2.predict(X_test2)
y_pred2

y_test2

#Рассчитать коэффициент детерминации
model2.score(X_test2, y_test2)

#Вывести график остатков
plt.scatter(X_test2, y_test2)
plt.plot(X_test2, y_pred2, c='r')

#############################################################################################

#Построить точечный график
df3.plot(kind = 'scatter', x = 'hardness', y = 'mortality', title = 'Correlation between mortality and water hardness 3')
plt.show()

#Рассчитать коэффициенты корреляции Пирсона и Спирмена
print('КК Спирмена\n', df3[['mortality', 'hardness']].corr(method = 'spearman'), '\n')
print('КК Пирсона\n', df3[['mortality', 'hardness']].corr(method = 'pearson'))

#Построить модель линейной регрессии
X3 = df3[['hardness']]
y3 = df3['mortality']

X_train3, X_test3, y_train3, y_test3 = train_test_split(X3, y3, test_size=0.30, random_state=3)

X_train3.shape

y_train3.shape

model3 = LinearRegression()
model3.fit(X_train3, y_train3)  # метод обучается на данных и подбирает оптимальные коэффициенты

model3.coef_

model3.intercept_

y_pred3 = model3.predict(X_test3)
y_pred3

y_test3

#Рассчитать коэффициент детерминации
model3.score(X_test3, y_test3)

#Вывести график остатков
plt.scatter(X_test3, y_test3)
plt.plot(X_test3, y_pred3, c='r')
plt.show()

"""ВЫВОД:
При разбиении данных на группы по расположению регионов всё так же наблюдается обратная зависимость между жёсткостью воды и среднегодовой смертностью, хоть и меньше. 
Для южных регионов наблюдается заметная зависимость, для северных - умеренная. 
Всё равно можно предполагать, что при высоких показателях жесткости воды, среднегодовая смертность становится ниже."""