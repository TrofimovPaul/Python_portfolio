# -*- coding: utf-8 -*-
"""Домашнее задание №4. ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hk6pwzXFp1IY7pJGEAVVlXsnZun0ETVH
"""

"""Домашнее задание к лекции "Функции"
Вам нужно помочь секретарю автоматизировать работу. 
Для этого нужно написать программу, которая будет на основе хранимых данных исполнять пользовательские команды.
Исходные данные имеют следующую структуру:
    перечень всех документов"""

documents = [
  {'type': 'passport', 'number': '2207 876234', 'name': 'Василий Гупкин'},
  {'type': 'invoice', 'number': '11-2', 'name': 'Геннадий Покемонов'},
  {'type': 'insurance', 'number': '10006', 'name': 'Аристарх Павлов'}
]

"""
Задание 1
Пункт 1. Пользователь по команде "p" может узнать владельца документа по его номеру
"""

def number_person():
  """Выводит владельца документа по номеру последнего"""
  number = input('Введите номер документа: ')
  list_of_numbers = []
  for person_info in documents:
    if number == person_info['number']:
      print('Владелец:', person_info['name'])
      list_of_numbers = [number]
      break
    else:
      list_of_numbers.append(person_info['number'])
  if number not in set(list_of_numbers):
    print('Такого документа нет! :(')
    
#number_person()

"""
Пункт 2. Пользователь по команде "s" может по номеру документа узнать на какой полке он хранится.
Перечень полок, на которых хранятся документы (если документ есть в documents, то он обязательно должен быть и в directories)
"""

directories = {
  '1': ['2207 876234', '11-2'],
  '2': ['10006'],
  '3': []
}

def number_directory(number1 = 0):
  """Выводит место хранения документа по номеру последнего"""
  if number1 == 0:
    number1 = input('Введите номер документа: ')
  list_of_numbers = []
  for level, list_of_doc in directories.items():
    if number1 in list_of_doc:
      answer = level
      list_of_numbers = [number1]
      break
    else:
      list_of_numbers.append(list_of_doc)
  if number1 not in list_of_numbers:
    answer = 'Такого документа нет! :('
  return answer

#print(number_directory())

"""
Пункт 3. Пользователь по команде "l" может увидеть полную информацию по всем документам
"""

def doc_info():
  """Выводит полную информацию по всем документам"""
  for i in documents:
    print(f"№: {i['number']}, Тип: {i['type']}, Владелец: {i['name']}, Полка хранения: {number_directory(i['number'])}")


#doc_info()

"""
Пункт 4. Пользователь по команде "ads" может добавить новую полку
"""

def add_levels():
  """Добавляет полку с заданным номером"""
  new_level = input('Введите номер полки: ')
  if new_level in list(directories.keys()):
    print('Такая полка уже существует!')
    for i in directories.keys():
      print('Перечень полок: ', ', '.join(list(directories.keys())))
      break
  else:
    directories[new_level] = []
    for i in directories.keys():
      print('Полка добавлена! Обновлённый перечень полок: ', ', '.join(list(directories.keys())))
      break

#add_levels()

"""
Пункт 5. Пользователь по команде "ds" может удалить существующую полку из данных (только если она пустая)
"""

def remove_levels():
  """Удаляет полку с заданным номером при условии, что она пуста"""
  number_of_levels = input('Введите номер удаляемой полки: ')
  if number_of_levels in list(directories.keys()) and directories[number_of_levels] == []:
    del(directories[number_of_levels])
    print('Полка удалена! Обновлённый перечень полок: ', ', '.join(list(directories.keys())))
  elif number_of_levels not in list(directories.keys()):
    print('Такой полки не найдено!')
  else:
    print('Данная полка не пуста!')

#remove_levels()

def start():
  print(
  """
  Добрый день! :)
  Выберите действие из списка:
  p - Выводит владельца документа по номеру последнего
  s - Выводит место хранения документа по номеру последнего
  l - Выводит полную информацию по всем документам
  ads - Добавляет полку с заданным номером
  ds - Удаляет полку с заданным номером при условии, что она пуста
  q - Остановка программы
  """
  )
  user_input = input('Выберите действие из списка: ')
  while user_input != 'q':
    if user_input == 'p':
      number_person()
    elif user_input == 's':
      print('Номер полки:', number_directory())
    elif user_input == 'l':
      doc_info()
    elif user_input == 'ads':
      add_levels()
    elif user_input == 'ds':
      remove_levels()
    user_input = input('Выберите действие из списка: ')
  return print('Программа завершена')

#start()


#Задание 2 (необязательное)
"""
Пункт 1. Пользователь по команде "ad" может добавить новый документ в данные
"""

def add_data():
  """Добавляет данные по новому документу"""
  new_data = {}
  new_data['type'] = input('Введите тип документа: ')
  new_data['number'] = input('Введите номер документа: ')
  new_data['name'] = input('Введите данные владельца документа: ')
  documents.append(new_data)
  print(documents)
  new_directory = input('Введите место хранения документа: ')
  if new_directory in list(directories.keys()):
    directories[new_directory].append(documents[-1]['number'])
    print('Документ добавлен! Обновлённый список документов:')
    doc_info()
  else:
    print('Полки с заданным номером не обнаружено!')
    del(documents[-1])
  

#add_data()
#doc_info()
"""
Пункт 2. Пользователь по команде "d" может удалить документ из данных
"""

def delete_data():
  """Удаляет данные о документе"""
  trash = input('Введите номер документа для удаления: ')
  list_of_numbers = []
  for i in documents:
    if trash == i['number']:
      del(documents[documents.index(i)])
      list_of_numbers = [trash]
      print('Документ удалён! Обновлённый список документов:')
      doc_info()
      break
    else:
      list_of_numbers.append(i['number'])
  for k, v in directories.items():
    if trash in v:
      v.remove(trash)
      list_of_numbers = [trash]
      break
    else:
      list_of_numbers.append(v)
  if trash not in list_of_numbers:
    print('Такого документа нет! :(')

#print(directories)
#delete_data()
#print(directories)
#doc_info()

"""
Пункт 3. Пользователь по команде "m" может переместить документ с полки на полку
"""

def change_levels():
  """Перемещает документ с полки на полку"""
  doc_change = input('Введите номер документа для перемещения: ')
  level_2 = input('Введите номер нового места хранения: ')
  list_change = []
  for key, val in directories.items():
    if doc_change in val:
      if level_2 not in list(directories.keys()):
        print('Полки с заданным номером не обнаружено!')
      else:
        val.remove(doc_change)
        directories[level_2].append(doc_change)
      list_change = [doc_change]
      print(f'Документ перемещён на полку {level_2}! Обновлённый список документов:\n')
      doc_info()
      break
    else:
      list_change.append(val)
  if doc_change not in list_change:
    print('Такого документа нет! :(')

#doc_info()     
#change_levels()
#doc_info()

def start_2():
  print(
  """
  Добрый день! :)
  Выберите действие из списка:
  p - Выводит владельца документа по номеру последнего
  s - Выводит место хранения документа по номеру последнего
  l - Выводит полную информацию по всем документам
  ads - Добавляет полку с заданным номером
  ds - Удаляет полку с заданным номером при условии, что она пуста
  ad - Добавляет данные по новому документу
  d - Удаляет данные о документе
  m - Перемещает документ с полки на полку
  q - Остановка программы
  """
  )
  user_input = input('Выберите действие из списка: ')
  while user_input != 'q':
    if user_input == 'p':
      number_person()
    elif user_input == 's':
      print('Номер полки:', number_directory())
    elif user_input == 'l':
      doc_info()
    elif user_input == 'ads':
      add_levels()
    elif user_input == 'ds':
      remove_levels()
    elif user_input == 'ad':
      add_data()
    elif user_input == 'd':
      delete_data()
    elif user_input == 'm':
      change_levels()
    print('\n')
    user_input = input('Выберите действие из списка: ')
    
  return print('Программа завершена')


start_2()