# -*- coding: utf-8 -*-
"""Домашнее задание №7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OTahqAnWH7uSDutAQjayzNNKAEmLgBsC
"""

"""
Задание 1
Напишите функцию, которая возвращает название валюты (поле ‘Name’) с максимальным значением курса с помощью сервиса https://www.cbr-xml-daily.ru/daily_json.js
"""
import json
import requests
full_data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
def currency_name(short_name='usd'):
  """Возвращает название валюты с максимальным значением курса"""
  c_name = full_data['Valute'][short_name.upper()]['Name']
  c_value = full_data['Valute'][short_name.upper()]['Value']
  c_prev = full_data['Valute'][short_name.upper()]['Previous']
  print(c_name)
  if c_value >= c_prev:
    print(f'Значение курса на сегодняшний день: {c_value} RUB')
  else:
    print(f'Значение курса на вчерашний день: {c_value} RUB')
currencies = []
for i in full_data['Valute']:
  currencies.append(i)
print('Выберите обозначение валюты:')
print('\r', ', '.join(currencies[:len(currencies)//2]))
print('\r',', '.join(currencies[len(currencies)//2:]), '\n')

#?currency_name
#help(currency_name)

currency_name('usd')

"""
Задание 2
Добавьте в класс Rate параметр diff (со значениями True или False), 
который в случае значения True в методах курсов валют (eur, usd итд) будет возвращать не курс валюты, 
а изменение по сравнению в прошлым значением. 
Считайте, self.diff будет принимать значение True только при возврате значения курса. При отображении всей информации о валюте он не используется.
"""
class Rate:
    def __init__(self, format_='value', diff=True): #Добавьте в класс Rate параметр diff (со значениями True или False)
        self.format = format_
        self.diff = diff
    def exchange_rates(self):
        """
        Возвращает ответ сервиса с информацией о валютах в виде:
        
        {
            'AMD': {
                'CharCode': 'AMD',
                'ID': 'R01060',
                'Name': 'Армянских драмов',
                'Nominal': 100,
                'NumCode': '051',
                'Previous': 14.103,
                'Value': 14.0879
                },
            ...
        }
        """
        self.r = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')
        return self.r.json()['Valute']
    
    def make_format(self, currency):
        """
        Возвращает информацию о валюте currency в двух вариантах:
        - полная информация о валюте при self.format = 'full':
        Rate('full').make_format('EUR')
        {
            'CharCode': 'EUR',
            'ID': 'R01239',
            'Name': 'Евро',
            'Nominal': 1,
            'NumCode': '978',
            'Previous': 79.6765,
            'Value': 79.4966
        }
        
        Rate('value').make_format('EUR')
        79.4966
        """
        response = self.exchange_rates()
        
        if currency in response:
            if self.format == 'full':#При отображении всей информации о валюте self.diff не используется.
                return response[currency]
            
            if self.format == 'value' and self.diff == True: #self.diff в случае значения True в методах курсов валют (eur, usd итд) 
            #будет возвращать не курс валюты, а изменение по сравнению в прошлым значением. 
                return response[currency]['Value']-response[currency]['Previous']
            
            if self.format == 'value' and self.diff == False:#self.diff в случае значения False в методах курсов валют (eur, usd итд) будет возвращать курс валюты 
                return response[currency]['Value']

        return 'Error'
    
    def eur(self):
        """Возвращает курс евро на сегодня в формате self.format"""
        return self.make_format('EUR')
    
    def usd(self):
        """Возвращает курс доллара на сегодня в формате self.format"""
        return self.make_format('USD')
    
    def brl(self):
        """Возвращает курс бразильского реала на сегодня в формате self.format"""
        return self.make_format('BRL')

Rate('full').usd()

Rate('value').usd()

Rate('value', False).usd()

"""
Задание 3
Напишите класс Designer, который учитывает количество международных премий. Подсказки в коде занятия в разделе “Домашнее задание задача 3”.

Комментарий по классу Designer такой:
Напишите класс Designer, который учитывает количество международных премий для дизайнеров 
(из презентации: “Повышение на 1 грейд за каждые 7 баллов. Получение международной премии – это +2 балла”). 
Считайте, что при выходе на работу сотрудник уже имеет две премии и их количество не меняется со стажем (конечно если хотите это можно вручную менять).

Класс Designer пишется по аналогии с классом Developer из материалов занятия.

"""
class Employee:
    def __init__(self, name, seniority):
        self.name = name
        self.seniority = seniority
        
        self.grade = 1
    
    def grade_up(self):
        """Повышает уровень сотрудника"""
        self.grade += 1
    
    def publish_grade(self):
        """Публикация результатов уровня сотрудников"""
        print(self.name, self.grade)
    
    def check_if_it_is_time_for_upgrade(self):
        pass

class Designer (Employee):
    def __init__(self, name, seniority=4): #Считайте, что при выходе на работу сотрудник уже имеет две премии и их количество не меняется со стажем 
        super().__init__(name, seniority)
    
    def check_if_it_is_time_for_upgrade(self):
        # при получении новой международной премии увеличиваем счетчик на 2 (Получение международной премии – это +2 балла)
        self.seniority += 2
        
        # условие повышения сотрудника (Повышение на 1 грейд за каждые 7 баллов.)
        if self.seniority - (7 * self.grade) >= 0:
            self.grade_up()
        
        # публикация результатов
        return self.publish_grade()

alex = Designer('Александр')
for i in range(20):
    alex.check_if_it_is_time_for_upgrade()