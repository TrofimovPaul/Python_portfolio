# -*- coding: utf-8 -*-
"""Домашнее задание №8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_rpMyfVQ9Fhl79u37s9SsymSvXX_ksus
"""

"""Домашнее задание к лекции "Регулярные выражения"
Внимание! При реализации всех заданий необходимо использовать именно функционал регулярных выражений для обработки текста.

Задание 1
Напишите функцию, которая принимает на вход строку и проверяет является ли она валидным транспортным номером (1 буква, 3 цифры, 2 буквы, 2-3 цифры). 
Обратите внимание, что не все буквы кириллического алфавита используются в транспортных номерах.
Если номер валиден, то функция должна возвращать отдельно номер и регион.
"""

import re
def validation():
  car_id = input('Введите номер автомобиля: ')
  #car_id = 'a022Bh96'
  #car_id = 'АБ22ВВ193'
  pattern_1 = r'([A-ZАВЕКМНОРСТУХ]{1}\d{3}[A-ZАВЕКМНОРСТУХ]{2})(\d{2,3})'
  str_find = re.findall(pattern_1, car_id, flags=re.IGNORECASE)
  if len(str_find) == 0:
    print('Номер не валиден')
  else:
    print('Вывод через обращение к списку и кортежу:')
    print('Номер валиден: {}\nРегион: {}'.format(str_find[0][0], str_find[0][1]))
    print('\nПоменяем местами через группировку и обращение:')
    str_group = re.search(pattern_1, car_id, flags = re.IGNORECASE)
    print(f'Регион: {str_group.group(2, 1)[0]}\nНомер валиден: {str_group.group(2, 1)[1]}')
    print('\nИли же через замену:')
    str_sub = re.sub(pattern_1, r'Регион: \2 \nНомер валиден: \1', car_id, flags = re.IGNORECASE)
    print(str_sub)

validation()

"""
Задание 2
Напишите функцию, которая будет удалять все последовательные повторы слов из заданной строки при помощи регулярных выражений.
"""
def delete_duplicates():
  some_string = 'Напишите функцию функцию, которая будет будет будет будет удалять все все все все последовательные повторы слов из из из из заданной строки строки при помощи регулярных выражений.'
  pattern_2 = r'(\w+)(\s+\1)*'
  #return re.findall(pattern_2, some_string)
  return re.sub(pattern_2, r'\1', some_string)

delete_duplicates()

#Результат:
#Напишите функцию, которая будет удалять все последовательные повторы слов из заданной строки при помощи регулярных выражений.

"""
Задание 3
Напишите функцию, которая будет возвращать акроним по переданной в нее строке со словами.
"""
def acronym():
  some_words = input('Введите текст: ')
  #some_words = 'Информационные технологии'
  #some_words = 'Near Field Communication'
  pattern_3 = r'(\w)(\w*)'
  re.findall(pattern_3, some_words)
  return ''.join((re.sub(pattern_3,r'\1', some_words)).strip().split()).upper()

acronym()

"""
Задание 4
Напишите функцию, которая будет принимать на вход список email-адресов и выводить их распределение по доменным зонам.
"""
def domain_list():
    pattern_4 = r'.+@(\w+.\w+)'  
    domains_dict = {}
    #print(emails)
    for i in emails:
      d = re.sub(pattern_4, r'\1',i)
      if d not in domains_dict:
        domains_dict[d] = 1
      else:
        domains_dict[d] = domains_dict[d]+1
    for k, v in domains_dict.items():
      print(f'{k}: {v}')
    return

def add_email():
  answer = input('Введите e-mail адрес, либо нажмите 0: ')
  global emails
  emails = ['test@gmail.com', 'xyz@test.in', 'test@ya.ru', 'xyz@mail.ru', 'xyz@ya.ru', 'xyz@gmail.com']
  while answer != '0':
    emails.append(answer)
    print(f'Список обновлён. Добавлен адрес {answer}')
    domain_list()
    answer = input('Введите e-mail адрес, либо нажмите 0: ')
  else:
    print('Последний актуальный список доменов: ')
    domain_list()


add_email()

#for i in emails:

"""
Задание 5 (необязательное)
Напишите функцию, которая будет подсчитывать сколько слов начинается на гласные,
а сколько на согласные буквы в тексте (текст может быть написан как с использованием букв кириллицы, так и латиницы).
"""

"""
pattern_5 = r'([A-ZА-ЯЁ])\w+'
pattern_6 = r'(\s+[a-zа-яё])\w+'

print(f'Слов на заглавные буквы: {len(re.findall(pattern_5, some_text))}')
print(f'Слов на строчные буквы: {len(re.findall(pattern_6, some_text))}')
#я напутал с заданием, но решил не удалять
"""

def words():
  some_text = 'Эталонной реализацией Python является интерпретатор CPython, поддерживающий большинство активно используемых платформ. Он распространяется под свободной лицензией Python Software Foundation License, позволяющей использовать его без ограничений в любых приложениях, включая проприетарные.'
  pattern_5 = r'^([AEIOUYАЕЁИОУЫЭЮЯ])\w+|\s+([AEIOUYАЕЁИОУЫЭЮЯ])\w+'
  pattern_6 = r'^([^AEIOUYАЕЁИОУЫЭЮЯ])\w+|\s([^AEIOUYАЕЁИОУЫЭЮЯ])\w*'
  p1 = re.findall(pattern_5, some_text, flags = re.IGNORECASE)
  p2 = re.findall(pattern_6, some_text, flags = re.IGNORECASE)
  
  """
  #вывод списков
    p1_list = []
    for i in p1:
      if i[0] != '':
        p1_list.append(i[0])
      else:
        p1_list.append(i[1])
    p2_list = []
    for i in p2:
      if i[0] != '':
        p2_list.append(i[0])
      else:
        p2_list.append(i[1])
    print(p1_list)
    print(p2_list)
  """
    
  print(f'Слов на гласные буквы: {len(re.findall(pattern_5, some_text, flags = re.IGNORECASE))}')
  print(f'Слов на согласные буквы: {len(re.findall(pattern_6, some_text, flags = re.IGNORECASE))}')
  return

words()

def check_your_number():
  phone = input('Введите номер: ')
  phone_list= ['79555555', '89555555555', '8(955)5555555', '+79555555555','+7 9555555555', '+7 955 5555+5555', '+7 (955) 5555555', '+7 955 5gg55 55 55', '+7 (955) 555 55 55', '+7-955-555-55-55', '+7-(955)-555-55-55', '+7 955 555 55 55', '+7 (955) 555 55 55',  '9555555555']
  phone_list.append(phone)
  phone_pattern = r'^\W*(\d?)\W*(\d{3})\W*(\d{3})\W*(\d{2})\W*(\d{2})\W*$'
  a = 0
  for i in phone_list:
    k = re.search(phone_pattern, i)
    a += 1
    if k == None:
      print(f'Номер сотового телефона {i} не валиден. Позиция в списке: {a}')
      continue
    else:
      if k.group(1) == '' or k.group(1) != '7':
        print(f'+7-{k.group(2)}-{k.group(3)}-{k.group(4)}-{k.group(5)}')
      else:
        print(f'+{k.group(1)}-{k.group(2)}-{k.group(3)}-{k.group(4)}-{k.group(5)}')
        
check_your_number()
#конечно, можно было через sub сделать ещё

"""
Задание 6 (необязательное)

Напишите функцию, которая будет проверять номер сотового телефона на валидность (только для российского формата), если он валиден, то переводить его в формат:
+7-xxx-xxx-xx-xx
Постарайтесь предусмотреть как можно больше адекватных форматов изначального ввода номера. Примеры работы программы:
"""

phone_pattern = r'\d-\d{3}-\d{3}-\d{2}-\d{2}'
re.findall(phone_pattern, phone_numbers)
    phone = '+7 955 555-55-55'

Результат: +7-955-555-55-55

    phone = '8(955)555-55-55'

Результат: +7-955-555-55-55

    phone = '+7 955 555 55 55'

Результат: +7-955-555-55-55

    phone = '7(955) 555-55-55'

Результат: +7-955-555-55-55

    phone = '423-555-55-5555'

Результат: Номер не валиден

    phone = '123-456-789'

Результат: Номер не валиден